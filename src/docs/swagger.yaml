basePath: /api
definitions:
  models.Auth:
    properties:
      access_token:
        type: string
      refresh_token:
        type: string
      user_id:
        type: string
    required:
    - refresh_token
    type: object
  models.RefreshToken:
    properties:
      refresh_token:
        type: string
    required:
    - refresh_token
    type: object
  models.User:
    properties:
      auth:
        allOf:
        - $ref: '#/definitions/models.Auth'
        description: relations
      first_name:
        type: string
      last_name:
        type: string
      phone_number:
        type: string
      username:
        type: string
    required:
    - first_name
    - last_name
    - phone_number
    - username
    type: object
  models.UserCredentials:
    properties:
      password:
        type: string
      username:
        type: string
    required:
    - password
    - username
    type: object
host: localhost:9000
info:
  contact: {}
  title: Swagger Boilerplate API
  version: "1.0"
paths:
  /application/heartbeat:
    get:
      responses:
        "200":
          description: OK
      summary: return a status
      tags:
      - heartbeat
  /auth/login:
    post:
      consumes:
      - application/json
      parameters:
      - description: user
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.UserCredentials'
      responses:
        "200":
          description: OK
      summary: create a user
      tags:
      - auth
  /auth/refresh:
    post:
      consumes:
      - application/json
      parameters:
      - description: user
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.RefreshToken'
      responses:
        "200":
          description: OK
      summary: get new token
      tags:
      - auth
  /users:
    get:
      responses:
        "200":
          description: OK
      summary: return list users
      tags:
      - users
    post:
      consumes:
      - application/json
      parameters:
      - description: user
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.User'
      responses:
        "200":
          description: OK
      summary: create a user
      tags:
      - users
  /users/{user_id}:
    delete:
      consumes:
      - application/json
      parameters:
      - description: user_id
        in: path
        name: user_id
        required: true
        type: string
      responses:
        "200":
          description: OK
      summary: delete a user
      tags:
      - users
    get:
      parameters:
      - description: user_id
        in: path
        name: user_id
        required: true
        type: string
      responses:
        "200":
          description: OK
      summary: return a user
      tags:
      - users
    put:
      consumes:
      - application/json
      parameters:
      - description: user_id
        in: path
        name: user_id
        required: true
        type: string
      - description: user
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.User'
      responses:
        "200":
          description: OK
      summary: update a user
      tags:
      - users
securityDefinitions:
  ApiKeyAuth:
    in: header
    name: Token
    type: apiKey
swagger: "2.0"
